<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

    <!--
        namespace命名空间，作用就是对sql进行分类化管理，理解sql隔离
        注意：使用mapper代理方法开发，namespace有特殊重要的作用
        是mapper代理开发的mapper实体类对应的地址
    -->
<mapper namespace="com.lyp.learn.mapper.UserMapper">

    <!-- 在 映射文件中配置很多sql语句 -->

    <!-- 需求：通过id查询用户表的记录 -->
    <!-- 通过 select执行数据库查询
    id：标识 映射文件中的 sql
    将sql语句封装到mappedStatement对象中，所以将id称为statement的id
    parameterType：指定输入 参数的类型，这里指定int型
    #{}表示一个占位符号
    #{id}：其中的id表示接收输入 的参数，参数名称就是id，如果输入 参数是简单类型，#{}中的参数名可以任意，可以value或其它名称

    resultType：指定sql输出结果 的所映射的java对象类型，select指定resultType表示将单条记录映射成的java对象。

    sql 语句中的结尾处，不能有分号
     -->
    <select id="selectUserById" parameterType="int" resultType="user">
        SELECT * FROM user WHERE id = #{id}
    </select>


    <!-- 根据用户名称模糊查询用户信息，可能返回多条
        resultType：指定就是单条记录所映射的java对象 类型
        ${}:表示拼接sql串，将接收到参数的内容不加任何修饰拼接在sql中。
        使用${}拼接sql，会引起 sql注入,所以不建议使用
        ${value}：接收输入 参数的内容，如果传入类型是简单类型，${}中只能使用value
	 -->
    <select id="findUserByName" parameterType="java.lang.String" resultType="com.lyp.learn.pojo.User">
        SELECT * FROM user WHERE username LIKE '%${value}%'
    </select>


    <select id="findUserByName2" parameterType="java.lang.String" resultType="com.lyp.learn.pojo.User">
         SELECT * FROM user WHERE username LIKE #{value}
    </select>

    <!-- 添加用户
        parameterType：指定输入 参数类型是pojo（包括 用户信息）
        #{}中指定pojo的属性名，接收到pojo对象的属性值，mybatis通过OGNL获取对象的属性值
	-->
    <insert id="insertUser1" parameterType="com.lyp.learn.pojo.User">
        <!-- 没有id字段 -->
        INSERT INTO user (username,birthday,sex,address)
        VALUES (#{username},#{birthday},#{sex},#{address})
    </insert>

    <insert id="insertUser2" parameterType="com.lyp.learn.pojo.User">
        <!-- 有id字段，但是前台传过来的 user 中，id没有赋值 -->
        INSERT INTO user (id,username,birthday,sex,address)
        VALUES (#{id},#{username},#{birthday},#{sex},#{address})
    </insert>


    <insert id="insertUser3" parameterType="com.lyp.learn.pojo.User">
        <!--
         将插入数据的主键返回，返回到user对象中

         SELECT LAST_INSERT_ID()：得到刚insert进去记录的主键值，只适用与自增主键

         keyProperty：将查询到主键值设置到parameterType指定的对象的哪个属性
         order：SELECT LAST_INSERT_ID()执行顺序，相对于insert语句来说它的执行顺序
                selectKey的执行顺序，是相对与insert语句来说，
                由于mysql的自增原理执行完insert语句之后才将主键生成，所以这里selectKey的执行顺序为after
                BEFORE 无法获取到自增id
                AFTER 可以获取到自增id
         resultType：指定SELECT LAST_INSERT_ID()的结果类型
          -->
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            SELECT LAST_INSERT_ID()
        </selectKey>
        INSERT INTO user (username,birthday,sex,address) VALUES (#{username},#{birthday},#{sex},#{address})
    </insert>

    <insert id="insertUser4" parameterType="com.lyp.learn.pojo.User">
        <!--
            非自增主键返回(使用uuid())
            使用mysql的uuid()函数生成主键，需要修改表中id字段类型为string，长度设置成35位。

            下面的不能正常执行，没有修改数据库，知道怎么做就行
            使用mysql的uuid（）生成主键
            执行过程：
            首先通过uuid()得到主键，将主键设置到user对象的id属性中
            其次在insert执行时，从user对象中取出id属性值
            在sql语句中，需要指定插入字段 id
		 -->
          <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String">
            SELECT uuid()
        </selectKey>
        INSERT INTO user(id,username,birthday,sex,address) VALUES(#{id},#{username},#{birthday},#{sex},#{address})

    </insert>

    <!-- 删除 用户
	    根据id删除用户，需要输入 id值
	 -->
    <delete id="deleteUserById" parameterType="int">
        DELETE FROM user WHERE id = #{id}
    </delete>

    <!-- 根据id更新用户
        分析：
        需要传入用户的id
        需要传入用户的更新信息
        parameterType指定user对象，包括 id和更新信息，注意：id必须存在
        #{id}：从输入 user对象中获取id属性值
	 -->
    <update id="updateUser" parameterType="com.lyp.learn.pojo.User">
        UPDATE user SET username = #{username},birthday = #{birthday},sex = #{sex},address = #{address} WHERE id = #{id}
    </update>

</mapper>



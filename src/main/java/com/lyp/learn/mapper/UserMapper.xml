<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

    <!--
        namespace命名空间，作用就是对sql进行分类化管理，理解sql隔离
        注意：使用mapper代理方法开发，namespace有特殊重要的作用
        是mapper代理开发的mapper实体类对应的地址
    -->
<mapper namespace="com.lyp.learn.mapper.UserMapper">


    <!-- 定义sql片段
	id：sql片段的唯 一标识
	
	经验：是基于单表来定义sql片段，这样话这个sql片段可重用性才高
	在sql片段中不要包括 where
	 -->
    <sql id="query_user_where">
        <if test="userCustom != null">
            <if test="userCustom.sex !=  null and userCustom.sex !=  '' ">
                and user.sex = #{userCustom.sex}
            </if>
            <if test="userCustom.username !=  null and userCustom.username !=  '' ">
                and username LIKE '%${userCustom.username}%'
            </if>
        </if>
    </sql>


    <sql id="query_user_where_foreach1">
        <if test="userCustom != null">
            <if test="userCustom.sex !=  null and userCustom.sex !=  '' ">
                and user.sex = #{userCustom.sex}
            </if>
            <if test="userCustom.username !=  null and userCustom.username !=  '' ">
                and username LIKE '%${userCustom.username}%'
            </if>
        </if>

        <if test="ids != null">
            <!--
                使用 foreach 遍历传入ids
                collection:指定输入对象中集合属性
                item:每个遍历生成对象
                open: 开始遍历时拼接的串
                close: 结束遍历时拼接的串
                separator: 遍历的两个对象中需要拼接的串
            -->
            <!--
                使用实现下面的sql拼接
                " AND (id = 1 OR id = 10 OR id =16)"
            -->
            <foreach collection="ids" item="eachId" open="AND (" close=")" separator="OR">
                <!--每个遍历需要拼接的串 -->
                id = #{eachId}
            </foreach>
        </if>
    </sql>

    <sql id="query_user_where_foreach2">
        <if test="ids != null">
            <!--
                使用 foreach 遍历传入ids
                collection:指定输入对象中集合属性
                item:每个遍历生成对象
                open: 开始遍历时拼接的串
                close: 结束遍历时拼接的串
                separator: 遍历的两个对象中需要拼接的串
            -->
            <!--
                使用实现下面的sql拼接
                " id IN (1,10,16)"
            -->
            <foreach collection="ids" item="eachId" open=" id IN (" close=")" separator=",">
                <!--每个遍历需要拼接的串 -->
                #{eachId}
            </foreach>
        </if>
    </sql>

    <!-- 定义resultMap
	将SELECT id id_,username,sex sex_,address address_ FROM user 和User类中的属性作一个映射关系

	type：resultMap最终映射的java对象类型,可以使用全限定名(com.lyp.learn.pojo.User) 或者别名(user)
	id：对resultMap的唯一标识
	 -->
    <resultMap id="userResultMap" type="user">
        <!-- id表示查询结果集中唯一标识,非常重要。如果是多个字段为复合唯一约束则定义多个<id />。
	 	column：查询出来的列名
	 	property：type指定的pojo类型中的属性名
	 	最终resultMap对column和property作一个映射关系 （对应关系）
	 	-->
        <id column="id_" property="id"/>
        <!--
	 	result：对普通名映射定义
	 	column：查询出来的列名
	 	property：type指定的pojo类型中的属性名
	 	最终resultMap对column和property作一个映射关系 （对应关系）
	 	 -->
        <result column="username" property="username"/>
        <result column="sex_" property="sex"/>
        <result column="address_" property="address"/>
    </resultMap>

    <!-- 在 映射文件中配置很多sql语句 -->

    <!-- 需求：通过id查询用户表的记录 -->
    <!-- 通过 select执行数据库查询
    id：标识 映射文件中的 sql
    将sql语句封装到mappedStatement对象中，所以将id称为statement的id
    parameterType：指定输入 参数的类型，这里指定int型
    #{}表示一个占位符号
    #{id}：其中的id表示接收输入 的参数，参数名称就是id，如果输入 参数是简单类型，#{}中的参数名可以任意，可以value或其它名称

    resultType：指定sql输出结果 的所映射的java对象类型，select指定resultType表示将单条记录映射成的java对象。

    sql 语句中的结尾处，不能有分号
     -->
    <select id="selectUserById" parameterType="int" resultType="user">
        SELECT * FROM user WHERE id = #{id}
    </select>

    <select id="selectUserByIds" parameterType="java.util.List" resultType="user">
        SELECT id,username,sex,address FROM user
        <where>
            <!-- 只有一个List参数时它的参数名为list ,collection 中指定的也是 list-->
            <!-- 此处，使用 大写的 AND 将报错，使用 and  即可 -->
            <if test="list != null and list.size > 0">
                <foreach collection="list" item="eachId" open="id IN(" close=")" separator=",">
                    #{eachId}
                </foreach>
            </if>
        </where>
    </select>

    <select id="selectUserByIds2" parameterType="java.util.List" resultType="user">
        SELECT id,username,sex,address FROM user
        <where>
            <!-- 此处，使用 大写的 AND 将报错，使用 and  即可 -->
            <if test="ids != null and ids.size > 0">
                <foreach collection="ids" item="eachId" open="id IN(" close=")" separator=",">
                    #{eachId}
                </foreach>
            </if>
        </where>
    </select>

    <!--
    int与[] 之间，不能有空格
    parameterType="int[]" 或者 Integer[] 或者 Object[]
    -->
    <select id="selectUserByArray" parameterType="int[]" resultType="user">
        SELECT id,username,sex,address FROM user
        <where>
            <!-- 此处，使用 大写的 AND 将报错，使用 and  即可 -->
            <if test="array != null and array.length > 0">
                <!-- sql只接收一个数组参数，这时sql解析参数的名称mybatis固定为array
                    使用 item 遍历-->
                <foreach collection="array" item="eachId" open="id IN(" close=")" separator=",">
                    #{eachId}
                </foreach>
            </if>
        </where>
    </select>

    <select id="selectUserByArray2" parameterType="int[]" resultType="user">
        SELECT id,username,sex,address FROM user
        <where>
            <if test="ids != null and ids.length > 0">
                <foreach collection="ids" item="eachId" open="id IN(" close=")" separator=",">
                    #{eachId}
                </foreach>
            </if>
        </where>
    </select>

    <!-- 使用resultMap进行输出映射
        resultMap：指定定义的resultMap的id，如果这个resultMap在其它的mapper文件，前边需要加namespace
        -->
    <select id="selectUserByIdResultMap" parameterType="int" resultMap="userResultMap">
        SELECT id id_,username,sex sex_,address address_ FROM user WHERE id = #{id}
    </select>


    <!-- 根据用户名称模糊查询用户信息，可能返回多条
        resultType：指定就是单条记录所映射的java对象 类型
        ${}:表示拼接sql串，将接收到参数的内容不加任何修饰拼接在sql中。
        使用${}拼接sql，会引起 sql注入,所以不建议使用
        ${value}：接收输入 参数的内容，如果传入类型是简单类型，${}中只能使用value
	 -->
    <select id="findUserByName" parameterType="java.lang.String" resultType="com.lyp.learn.pojo.User">
        SELECT * FROM user WHERE username LIKE '%${value}%'
    </select>


    <select id="findUserByName2" parameterType="java.lang.String" resultType="com.lyp.learn.pojo.User">
         SELECT * FROM user WHERE username LIKE #{value}
    </select>

    <select id="findUserByAddresses" parameterType="java.util.List" resultType="user">
        SELECT id,username,address FROM user
        <where>
            <if test="list != null and list.size > 0">
                <foreach collection="list" item="ad" open="address IN(" close=")" separator=",">
                    #{ad}
                </foreach>
            </if>
        </where>
    </select>

    <!--声明成了 Object[] 类型的数组-->
    <select id="findUserByAddressArray" parameterType="Object[]" resultType="user">
        SELECT id,username,address FROM user
        <where>
            <if test="addressArr != null and addressArr.length > 0">
                <foreach collection="addressArr" item="aa" open="address IN(" close=")" separator=",">
                    #{aa}
                </foreach>
            </if>
        </where>
    </select>

    <!--用户综合信息查询-->
    <select id="findUserList" parameterType="com.lyp.learn.pojo.UserQueryVo" resultType="com.lyp.learn.pojo.User">
        SELECT user.id,user.username,user.sex,user.address FROM user WHERE user.sex = #{userCustom.sex} AND username LIKE '%${userCustom.username}%'
    </select>

    <!--用户综合信息查询 总数-->
    <select id="findUserListCount" parameterType="com.lyp.learn.pojo.UserQueryVo" resultType="int">
        SELECT count(*) FROM user WHERE user.sex = #{userCustom.sex} AND username LIKE '%${userCustom.username}%'
    </select>


    <!--用户综合信息查询 通过 where if-->
    <select id="findUserList2" parameterType="com.lyp.learn.pojo.UserQueryVo" resultType="com.lyp.learn.pojo.User">
        SELECT user.id,user.username,user.sex,user.address FROM user
        <!--where 可以自动的去除 开头的and -->
        <where>
            <if test="userCustom != null">
                <if test="userCustom.sex !=  null and userCustom.sex !=  '' ">
                   and user.sex = #{userCustom.sex}
                </if>
                <if test="userCustom.username !=  null and userCustom.username !=  '' ">
                    and username LIKE '%${userCustom.username}%'
                </if>
            </if>
        </where>
    </select>

    <!--用户综合信息查询 总数 通过 where if-->
    <select id="findUserListCount2" parameterType="com.lyp.learn.pojo.UserQueryVo" resultType="int">
        SELECT count(*) FROM user
        WHERE 1 = 1
        <if test="userCustom != null">
            <if test="userCustom.sex !=  null and userCustom.sex !=  '' ">
               and user.sex = #{userCustom.sex}
            </if>
            <if test="userCustom.username !=  null and userCustom.username !=  '' ">
                and username LIKE '%${userCustom.username}%'
            </if>
        </if>
    </select>


    <!--用户综合信息查询 通过 where if sql片段-->
    <select id="findUserList3" parameterType="com.lyp.learn.pojo.UserQueryVo" resultType="com.lyp.learn.pojo.User">
        SELECT user.id,user.username,user.sex,user.address FROM user
        <!--where 可以自动的去除 开头的and -->
        <where>
           <include refid="query_user_where"/>
        </where>
    </select>

    <!--用户综合信息查询 总数 通过 where if sql片段 -->
    <select id="findUserListCount3" parameterType="com.lyp.learn.pojo.UserQueryVo" resultType="int">
        SELECT count(*) FROM user
        <where>
            <include refid="query_user_where"/>
        </where>
    </select>


    <!--用户综合信息查询 通过 where if sql片段 query_user_where_foreach1 -->
    <select id="findUserList4" parameterType="com.lyp.learn.pojo.UserQueryVo" resultType="com.lyp.learn.pojo.User">
        SELECT user.id,user.username,user.sex,user.address FROM user
        <!--where 可以自动的去除 开头的and -->
        <where>
            <include refid="query_user_where_foreach1"/>
        </where>
    </select>

    <!--用户综合信息查询 总数 通过 where if sql片段 query_user_where_foreach2-->
    <select id="findUserListCount4" parameterType="com.lyp.learn.pojo.UserQueryVo" resultType="int">
        SELECT count(*) FROM user
        <where>
            <include refid="query_user_where_foreach2"/>
        </where>
    </select>


    <!-- 添加用户
        parameterType：指定输入 参数类型是pojo（包括 用户信息）
        #{}中指定pojo的属性名，接收到pojo对象的属性值，mybatis通过OGNL获取对象的属性值
	-->
    <insert id="insertUser1" parameterType="com.lyp.learn.pojo.User">
        <!-- 没有id字段 -->
        INSERT INTO user (username,birthday,sex,address)
        VALUES (#{username},#{birthday},#{sex},#{address})
    </insert>

    <insert id="insertUser2" parameterType="com.lyp.learn.pojo.User">
        <!-- 有id字段，但是前台传过来的 user 中，id没有赋值 -->
        INSERT INTO user (id,username,birthday,sex,address)
        VALUES (#{id},#{username},#{birthday},#{sex},#{address})
    </insert>


    <insert id="insertUser3" parameterType="com.lyp.learn.pojo.User">
        <!--
         将插入数据的主键返回，返回到user对象中

         SELECT LAST_INSERT_ID()：得到刚insert进去记录的主键值，只适用与自增主键

         keyProperty：将查询到主键值设置到parameterType指定的对象的哪个属性
         order：SELECT LAST_INSERT_ID()执行顺序，相对于insert语句来说它的执行顺序
                selectKey的执行顺序，是相对与insert语句来说，
                由于mysql的自增原理执行完insert语句之后才将主键生成，所以这里selectKey的执行顺序为after
                BEFORE 无法获取到自增id
                AFTER 可以获取到自增id
         resultType：指定SELECT LAST_INSERT_ID()的结果类型
          -->
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            SELECT LAST_INSERT_ID()
        </selectKey>
        INSERT INTO user (username,birthday,sex,address) VALUES (#{username},#{birthday},#{sex},#{address})
    </insert>

    <insert id="insertUser4" parameterType="com.lyp.learn.pojo.User">
        <!--
            非自增主键返回(使用uuid())
            使用mysql的uuid()函数生成主键，需要修改表中id字段类型为string，长度设置成35位。

            下面的不能正常执行，没有修改数据库，知道怎么做就行
            使用mysql的uuid（）生成主键
            执行过程：
            首先通过uuid()得到主键，将主键设置到user对象的id属性中
            其次在insert执行时，从user对象中取出id属性值
            在sql语句中，需要指定插入字段 id
		 -->
          <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String">
            SELECT uuid()
        </selectKey>
        INSERT INTO user(id,username,birthday,sex,address) VALUES(#{id},#{username},#{birthday},#{sex},#{address})

    </insert>

    <!--批量插入用户信息
    INSERT INTO USER (username,birthday,sex,address) VALUES
    ('钱小三1','2010-10-16',2,'北京'),
    ('钱小三2','2010-10-16',2,'北京') ,
    ('钱小三3','2010-10-16',2,'北京')
    -->
    <insert id="insertUserBatch" parameterType="java.util.List">
         INSERT INTO user (username,birthday,sex,address) VALUES
         <foreach collection="list" item="im"  separator="," >
             (#{im.username},#{im.birthday},#{im.sex},#{im.address})
         </foreach>
    </insert>

    <insert id="insertUserBatch2" parameterType="java.util.List">
        INSERT INTO user (username,birthday,sex,address) VALUES
        <foreach collection="users" item="user"  separator="," >
            (#{user.username},#{user.birthday},#{user.sex},#{user.address})
        </foreach>
    </insert>

    <!-- 删除 用户
	    根据id删除用户，需要输入 id值
	 -->
    <delete id="deleteUserById" parameterType="int">
        DELETE FROM user WHERE id = #{id}
    </delete>

    <!-- 根据id更新用户
        分析：
        需要传入用户的id
        需要传入用户的更新信息
        parameterType指定user对象，包括 id和更新信息，注意：id必须存在
        #{id}：从输入 user对象中获取id属性值
	 -->
    <update id="updateUser" parameterType="com.lyp.learn.pojo.User">
        UPDATE user SET username = #{username},birthday = #{birthday},sex = #{sex},address = #{address} WHERE id = #{id}
    </update>

    <!--获取用户，通过hashMap传入参数-->
    <select id="getUsersByHashMap" parameterType="hashMap" resultType="user">
        SELECT id,username,sex,address FROM user WHERE username = #{username} OR address = #{address} or id = #{id}
    </select>

    <!--通过多参数，查询用户列表,不写输入参数类型-->
    <select id="getUserByManyParam"  resultType="user">
        SELECT id,username,sex,address FROM user WHERE id =#{id} or username = #{un} OR address = #{address}
    </select>

</mapper>


